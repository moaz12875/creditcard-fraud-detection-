# -*- coding: utf-8 -*-
"""Untitled32.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15cAsIm2j6Q6PeZjzxg2sWut9xDSLHJpS
"""
import gradio as gr  
import pandas as pd  
import joblib  

# ØªØ­Ù…ÙŠÙ„ Ø§Ù„Ù…ÙˆØ¯ÙŠÙ„  
model = joblib.load("xgb_credit_model.pkl")  

# Ø¯Ù…Ø¬ Ø§Ù„Ù€ CSS Ø§Ù„Ø£ÙˆÙ„ Ù…Ø¹ Ø§Ù„Ù€ CSS Ø§Ù„ØªØ§Ù†ÙŠ  
custom_css = """  
.gradio-container {  
  background: linear-gradient(135deg, #f7f9fc 0%, #eef3ff 50%, #f9f7ff 100%);  
  min-height: 100vh;  
}  
.dark .gradio-container {  
  background: linear-gradient(135deg, #0f1220 0%, #141a2a 50%, #1a2133 100%);  
}  
.gradio-container .block, .gradio-container .panel, .gradio-container .form {  
  backdrop-filter: blur(8px);  
  background: rgba(255,255,255,0.6);  
  border-radius: 16px;  
}  
.dark .gradio-container .block, .dark .gradio-container .panel, .dark .gradio-container .form {  
  background: rgba(20,24,38,0.6);  
}  
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap');  
body { font-family: "Helvetica Neue", Arial, sans-serif; color: white; background:black; }  
.title { text-align: center; margin-bottom: 50px; color:red; font-size:36px; font-weight:700; }  
.gr-button { background-color: black !important; color: darkblue !important; font-weight:600; border-radius:38px !important; padding:15px 20px !important; }  
.gr-button:hover { background-color: red !important; }  
.feature-table { width:60%; border-collapse: collapse; margin-bottom:15px; background:#f9f9f9; color:black; }  
.feature-table th { background:#333; color:white; padding:8px; border:1px solid #ddd; }  
.feature-table td { border:1px solid #ddd; padding:8px; }  
.meter-container { width:60%; background:#222; border-radius:5px; overflow:hidden; margin-bottom:10px; height:30px; }  
.meter-bar { height:100%; background: linear-gradient(to right, green, orange, red); text-align:center; line-height:30px; font-weight:bold; transition: width 1s; }  
.fraud-percent { font-weight:bold; margin-bottom:10px; color:white; }  
.alert.high {color:red; font-size:18px; font-weight:bold;}  
.alert.medium {color:orange; font-weight:bold;}  
.alert.low {color:green;}  
"""  

# ØªØ­ÙˆÙŠÙ„ Ø§Ù„ÙˆÙ‚Øª Ù…Ù† Dropdown Ù„Ù‚ÙŠÙ… Ø±Ù‚Ù…ÙŠØ©  
time_mapping = {  
    "Morning": 15000,  
    "Afternoon": 35000,  
    "Evening":60000,  
    "Night": 80000  
}
def predict_fraud(country, ttype, amount, time, device_type, is_recurring):  
    time_value = time_mapping[time]  

    input_data = pd.DataFrame(  
        [[time_value, amount] + [0]*28],  
        columns=model.get_booster().feature_names  
    )  

    pred = model.predict(input_data)[0]  
    prob = float(model.predict_proba(input_data)[0][1]) if hasattr(model, "predict_proba") else (1.0 if pred == 1 else 0.0)  
    prob = max(0, min(prob, 1))  

    table_html = f"""  
    <table class="feature-table">  
      <tr><th>Feature</th><th>Value</th></tr>  
      <tr><td>Country</td><td>{country}</td></tr>  
      <tr><td>Type Transaction</td><td>{ttype}</td></tr>  
      <tr><td>Amount</td><td>{amount}</td></tr>  
      <tr><td>Time</td><td>{time}</td></tr>  
      <tr><td>Device_Type</td><td>{device_type}</td></tr>  
      <tr><td>Is_Recurring</td><td>{is_recurring}</td></tr>  
      </table>  
      """  

    meter_html = f"""  
    <div class="meter-container">  
      <div class="meter-bar" style="width:{prob*100:.2f}%;"></div>  
    </div>  
    <p class="fraud-percent">Fraud Probability: {prob*100:.2f}%</p>  
    """  

    if prob > 0.7:  
        msg = "<p class='alert high'>ðŸš¨ High fraud probability!</p>"  
    elif prob > 0.4:  
        msg = "<p class='alert medium'>âš  Medium fraud probability.</p>"  
    else:  
        msg = "<p class='alert low'>âœ… Low fraud probability.</p>"  

    return table_html + meter_html + msg  
with gr.Blocks(css=custom_css) as demo:  
    with gr.Column():  
        gr.HTML("<h1 class='title'>Credit Card Fraud Detection</h1>")  
        country = gr.Dropdown(["international","domestic"], label="Country")  
        ttype = gr.Dropdown(["Online","ATM","in-store","other"], label="Type Transaction")  
        amount = gr.Slider(0,10000, step=10, label="Amount")  
        time = gr.Dropdown(["Morning","Afternoon","Evening","Night"], label="Time")  
        device_type = gr.Dropdown(["mobile","desktop","atm","pos-terminal"], label="Device Type")  
        is_recurring = gr.Dropdown(["yes","no"], label="Is Recurring")  
        btn = gr.Button("Predict")  
        output = gr.HTML()  
        btn.click(fn=predict_fraud, inputs=[country, ttype, amount, time, device_type, is_recurring], outputs=output) 
demo.launch(server_name="0.0.0.0", server_port=7860)
